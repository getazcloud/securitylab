{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "DefaultUserName": {
      "type": "string",
      "defaultValue": "Dummy",
      "metadata": {
        "description": "Builtin\\Administrator account's name for the Virtual Machines. This is not a domain account."
      }
    },
    "DefaultPassword": {
      "type": "securestring",
      "defaultValue": "Dummy",
      "metadata": {
        "description": "Password for the Builtin Administrator account. Default is 'H@ppytimes!'"
      }
    },
    "workbookId": {
        "type": "string",
        "defaultValue": "[newGuid()]",
        "metadata": {
          "description": "The unique guid for this workbook instance. You may leave the default value."
        }
      }
  },  
  "variables": {
    "VN-Name1": "VN-HUB",
    "VN-Name2": "VN-SPOKE1",
    "VN-Name3": "VN-SPOKE2",
    "VN-Name1Prefix": "10.0.25.0/24",
    "VN-Name1Subnet1Name": "AGWAFSubnet",
    "VN-Name1Subnet1Prefix": "10.0.25.64/26",
    "VN-Name1Subnet2Name": "AzureFirewallSubnet",
    "VN-Name1Subnet2Prefix": "10.0.25.0/26",
    "VN-Name2Prefix": "10.0.27.0/24",
    "VN-Name2Subnet1Name": "SPOKE1-SUBNET1",
    "VN-Name2Subnet1Prefix": "10.0.27.0/26",
    "VN-Name2Subnet2Name": "SPOKE1-SUBNET2",
    "VN-Name2Subnet2Prefix": "10.0.27.64/26",
    "VN-Name3Prefix": "10.0.28.0/24",
    "VN-Name3Subnet1Name": "SPOKE2-SUBNET1",
    "VN-Name3Subnet1Prefix": "10.0.28.0/26",
    "VN-Name3Subnet2Name": "SPOKE2-SUBNET2",
    "VN-Name3Subnet2Prefix": "10.0.28.64/26",
    "Subnet_serviceEndpoints": [
      {
        "service": "Microsoft.Web"
      },
      {
        "service": "Microsoft.Storage"
      },
      {
        "service": "Microsoft.Sql"
      },
      {
        "service": "Microsoft.ServiceBus"
      },
      {
        "service": "Microsoft.KeyVault"
      },
      {
        "service": "Microsoft.AzureActiveDirectory"
      }
    ],
    "publicIpAddressName1": "SOCNSFWPIP",
    "publicIpAddressName2": "SOCNSAGPIP",
    "FW-name": "SOC-NS-FW",
    "firewallPolicyName": "SOC-NS-FWPolicy",
    "AppGatewayPolicyName": "SOC-NS-AGPolicy",
    "AG-Name": "SOC-NS-AG-WAFv2",
    "AppGateway_IPAddress": "10.0.25.70",
    "applicationGatewayId": "[resourceId('Microsoft.Network/applicationGateways', variables('AG-Name'))]",
    "RT-Name1": "SOC-NS-DEFAULT-ROUTE",
    "NSG-Name1": "SOC-NS-NSG-SPOKE1",
    "NSG-Name2": "SOC-NS-NSG-SPOKE2",
    "Site-Name1": "[concat('owaspdirect','-', uniqueString(resourceGroup().id))]",
    "Site-HPN": "OWASP-ASP",
    "NIC-Name2": "Nic2",
    "NIC-Name3": "Nic3",
    "workspaceName": "[concat('airlift','-', uniqueString(resourceGroup().id))]",
    "NIC-Name2Ipaddress": "10.0.27.68",
    "NIC-Name3Ipaddress": "10.0.28.4",
    "VM-Name2": "VM-Kali",
    "VM-Name3": "VM-Win2019",
    "workbookDisplayName": "Microsoft Azure WAF",
    "workbookType": "workbook"
  },
  "resources": [
    
      {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-12-01-preview",
      "name": "[variables('workspaceName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/tables",
      "apiVersion": "2021-12-01-preview",
      "name": "[format('{0}/{1}', variables('workspaceName'), 'Heartbeat')]",
      "properties": {
        "retentionInDays": 30
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
      ]
    },
    {
      "name": "[variables('VN-Name1')]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2020-03-01",
      "tags": {
        "displayName": "[variables('VN-Name1')]"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('VN-Name1Prefix')]"
          ]
        },
        "enableVmProtection": false
      },
      "resources": [
        {
          "apiVersion": "2020-03-01",
          "type": "subnets",
          "location": "[resourceGroup().location]",
          "name": "[variables('VN-Name1Subnet1Name')]",
          "dependsOn": [
            "[resourceId('Microsoft.Network/virtualNetworks', variables('VN-Name1'))]"
          ],
          "properties": {
            "addressPrefix": "[variables('VN-Name1Subnet1Prefix')]",
            "serviceEndpoints": "[variables('Subnet_serviceEndpoints')]"
          }
        },
        {
          "apiVersion": "2020-03-01",
          "type": "subnets",
          "location": "[resourceGroup().location]",
          "name": "[variables('VN-Name1Subnet2Name')]",
          "dependsOn": [
            "[resourceId('Microsoft.Network/virtualNetworks', variables('VN-Name1'))]",
            "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VN-Name1'), variables('VN-Name1Subnet1Name'))]"
          ],
          "properties": {
            "addressPrefix": "[variables('VN-Name1Subnet2Prefix')]",
            "serviceEndpoints": "[variables('Subnet_serviceEndpoints')]"
          }
        }
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks/providers/diagnosticSettings",
      "name": "[concat(variables('VN-Name1'),'/microsoft.insights/', 'VN1Diagnostics')]",
      "apiVersion": "2017-05-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('VN-Name1'))]"
      ],
      "properties": {
        "name": "DiagService",
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]",
        "logs": [
          {
            "category": "VMProtectionAlerts",
            "enabled": true
          }
        ]
      }
    },
    {
      "name": "[variables('VN-Name2')]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2020-03-01",
      "dependsOn": [
        "[resourceId('Microsoft.Network/routeTables', variables('RT-Name1'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('NSG-Name1'))]"
      ],
      "tags": {
        "displayName": "[variables('VN-Name2')]"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('VN-Name2Prefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('VN-Name2Subnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('VN-Name2Subnet1Prefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('NSG-Name1'))]"
              },
              "routeTable": {
                "id": "[resourceId('Microsoft.Network/routeTables', variables('RT-Name1'))]"
              },
              "serviceEndpoints": "[variables('Subnet_serviceEndpoints')]",
              "privateEndpointNetworkPolicies": "Enabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "[variables('VN-Name2Subnet2Name')]",
            "properties": {
              "addressPrefix": "[variables('VN-Name2Subnet2Prefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('NSG-Name1'))]"
              },
              "routeTable": {
                "id": "[resourceId('Microsoft.Network/routeTables', variables('RT-Name1'))]"
              },
              "serviceEndpoints": "[variables('Subnet_serviceEndpoints')]",
              "privateEndpointNetworkPolicies": "Enabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks/providers/diagnosticSettings",
      "name": "[concat(variables('VN-Name2'),'/microsoft.insights/', 'VN2Diagnostics')]",
      "apiVersion": "2017-05-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('VN-Name2'))]"
      ],
      "properties": {
        "name": "DiagService",
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]",
        "logs": [
          {
            "category": "VMProtectionAlerts",
            "enabled": true
          }
        ]
      }
    },
    {
      "name": "[variables('VN-Name3')]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2020-03-01",
      "dependsOn": [
        "[resourceId('Microsoft.Network/routeTables', variables('RT-Name1'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('NSG-Name2'))]"
      ],
      "tags": {
        "displayName": "[variables('VN-Name3')]"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('VN-Name3Prefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('VN-Name3Subnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('VN-Name3Subnet1Prefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('NSG-Name2'))]"
              },
              "routeTable": {
                "id": "[resourceId('Microsoft.Network/routeTables', variables('RT-Name1'))]"
              },
              "serviceEndpoints": "[variables('Subnet_serviceEndpoints')]",
              "privateEndpointNetworkPolicies": "Enabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "[variables('VN-Name3Subnet2Name')]",
            "properties": {
              "addressPrefix": "[variables('VN-Name3Subnet2Prefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('NSG-Name2'))]"
              },
              "routeTable": {
                "id": "[resourceId('Microsoft.Network/routeTables', variables('RT-Name1'))]"
              },
              "serviceEndpoints": "[variables('Subnet_serviceEndpoints')]",
              "privateEndpointNetworkPolicies": "Enabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks/providers/diagnosticSettings",
      "name": "[concat(variables('VN-Name3'),'/microsoft.insights/', 'VN3Diagnostics')]",
      "apiVersion": "2017-05-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('VN-Name3'))]"
      ],
      "properties": {
        "name": "DiagService",
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]",
        "logs": [
          {
            "category": "VMProtectionAlerts",
            "enabled": true
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
      "apiVersion": "2020-04-01",
      "name": "[concat(variables('VN-Name1'), '/', variables('VN-Name1'), '-Peering-To-', variables('VN-NAME2'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('VN-Name1'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('VN-Name2'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('VN-Name3'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VN-Name1'), variables('VN-Name1Subnet1Name'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VN-Name1'), variables('VN-Name1Subnet2Name'))]"
      ],
      "properties": {
        "peeringState": "Connected",
        "remoteVirtualNetwork": {
          "id": "[resourceid('Microsoft.Network/virtualNetworks', variables('VN-Name2'))]"
        },
        "allowVirtualNetworkAccess": true,
        "allowForwardedTraffic": true,
        "allowGatewayTransit": false,
        "useRemoteGateways": false,
        "remoteAddressSpace": {
          "addressPrefixes": [
            "[variables('VN-Name2Prefix')]"
          ]
        }
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
      "apiVersion": "2020-04-01",
      "name": "[concat(variables('VN-Name1'), '/', variables('VN-Name1'), '-Peering-To-', variables('VN-NAME3'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('VN-Name1'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('VN-Name2'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('VN-Name3'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VN-Name1'), variables('VN-Name1Subnet1Name'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VN-Name1'), variables('VN-Name1Subnet2Name'))]"
      ],
      "properties": {
        "peeringState": "Connected",
        "remoteVirtualNetwork": {
          "id": "[resourceid('Microsoft.Network/virtualNetworks', variables('VN-Name3'))]"
        },
        "allowVirtualNetworkAccess": true,
        "allowForwardedTraffic": true,
        "allowGatewayTransit": false,
        "useRemoteGateways": false,
        "remoteAddressSpace": {
          "addressPrefixes": [
            "[variables('VN-Name3Prefix')]"
          ]
        }
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
      "apiVersion": "2020-04-01",
      "name": "[concat(variables('VN-Name2'), '/', variables('VN-Name2'), '-Peering-To-', variables('VN-NAME1'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('VN-Name1'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('VN-Name2'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('VN-Name3'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VN-Name1'), variables('VN-Name1Subnet1Name'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VN-Name1'), variables('VN-Name1Subnet2Name'))]"
      ],
      "properties": {
        "peeringState": "Connected",
        "remoteVirtualNetwork": {
          "id": "[resourceid('Microsoft.Network/virtualNetworks', variables('VN-Name1'))]"
        },
        "allowVirtualNetworkAccess": true,
        "allowForwardedTraffic": true,
        "allowGatewayTransit": false,
        "useRemoteGateways": false,
        "remoteAddressSpace": {
          "addressPrefixes": [
            "[variables('VN-Name1Prefix')]"
          ]
        }
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
      "apiVersion": "2020-04-01",
      "name": "[concat(variables('VN-Name3'), '/', variables('VN-Name3'), '-Peering-To-', variables('VN-NAME1'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('VN-Name1'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('VN-Name2'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('VN-Name3'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VN-Name1'), variables('VN-Name1Subnet1Name'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VN-Name1'), variables('VN-Name1Subnet2Name'))]"
      ],
      "properties": {
        "peeringState": "Connected",
        "remoteVirtualNetwork": {
          "id": "[resourceid('Microsoft.Network/virtualNetworks', variables('VN-Name1'))]"
        },
        "allowVirtualNetworkAccess": true,
        "allowForwardedTraffic": true,
        "allowGatewayTransit": false,
        "useRemoteGateways": false,
        "remoteAddressSpace": {
          "addressPrefixes": [
            "[variables('VN-Name1Prefix')]"
          ]
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIpAddresses",
      "apiVersion": "2019-02-01",
      "name": "[variables('publicIpAddressName1')]",
      "location": "[resourceGroup().location]",
      "tags": {},
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAddressVersion": "IPv4",
        "publicIPAllocationMethod": "Static",
        "idleTimeoutInMinutes": 4
      }
    },
    {
      "type": "Microsoft.Network/publicIpAddresses/providers/diagnosticSettings",
      "name": "[concat(variables('publicIpAddressName1'),'/microsoft.insights/', 'PIP1Diagnostics')]",
      "apiVersion": "2017-05-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIpAddresses', variables('publicIpAddressName1'))]"
      ],
      "properties": {
        "name": "DiagService",
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]",
        "logs": [
          {
            "category": "DDoSProtectionNotifications",
            "enabled": true
          },
          {
            "category": "DDoSMitigationFlowLogs",
            "enabled": true
          },
          {
            "category": "DDoSMitigationReports",
            "enabled": true
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIpAddresses",
      "apiVersion": "2019-02-01",
      "name": "[variables('publicIpAddressName2')]",
      "location": "[resourceGroup().location]",
      "tags": {},
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAddressVersion": "IPv4",
        "publicIPAllocationMethod": "Static",
        "idleTimeoutInMinutes": 4
      }
    },
    {
      "type": "Microsoft.Network/publicIpAddresses/providers/diagnosticSettings",
      "name": "[concat(variables('publicIpAddressName2'),'/microsoft.insights/', 'PIP2Diagnostics')]",
      "apiVersion": "2017-05-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIpAddresses', variables('publicIpAddressName2'))]"
      ],
      "properties": {
        "name": "DiagService",
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]",
        "logs": [
          {
            "category": "DDoSProtectionNotifications",
            "enabled": true
          },
          {
            "category": "DDoSMitigationFlowLogs",
            "enabled": true
          },
          {
            "category": "DDoSMitigationReports",
            "enabled": true
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/azureFirewalls",
      "apiVersion": "2019-11-01",
      "name": "[variables('FW-name')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIpAddresses', variables('publicIpAddressName1'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VN-Name1'), variables('VN-Name1Subnet2Name'))]",
        "[resourceId('Microsoft.Network/firewallPolicies', variables('firewallPolicyName'))]",
        "[resourceId('Microsoft.Network/applicationGateways', variables('AG-Name'))]"
      ],
      "tags": {},
      "properties": {
        "threatIntelMode": "Deny",
        "ipConfigurations": [
          {
            "name": "[variables('publicIpAddressName1')]",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VN-Name1'), variables('VN-Name1Subnet2Name'))]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName1'))]"
              }
            }
          }
        ],
        "firewallPolicy": {
          "id": "[resourceId('Microsoft.Network/firewallPolicies',variables('firewallPolicyName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/azureFirewalls/providers/diagnosticSettings",
      "name": "[concat(variables('FW-name'),'/microsoft.insights/', 'FirewallDiagnostics')]",
      "apiVersion": "2017-05-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Network/azureFirewalls', variables('FW-name'))]"
      ],
      "properties": {
        "name": "DiagService",
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]",
        "logs": [
          {
            "category": "AzureFirewallApplicationRule",
            "enabled": true,
            "retentionPolicy": {
              "days": 10,
              "enabled": false
            }
          },
          {
            "category": "AzureFirewallNetworkRule",
            "enabled": true,
            "retentionPolicy": {
              "days": 10,
              "enabled": false
            }
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true,
            "retentionPolicy": {
              "enabled": false,
              "days": 0
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/firewallPolicies",
      "apiVersion": "2019-06-01",
      "name": "[variables('firewallPolicyName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [],
      "tags": {},
      "properties": {
        "threatIntelMode": "Deny"
      },
      "resources": [
        {
          "type": "ruleGroups",
          "apiVersion": "2019-06-01",
          "name": "DefaultDnatRuleCollectionGroup",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Network/firewallPolicies',variables('firewallPolicyName'))]"
          ],
          "properties": {
            "priority": 100,
            "rules": [
              {
                "name": "APPGW-WEBAPP",
                "priority": 100,
                "ruleType": "FirewallPolicyNatRule",
                "action": {
                  "type": "Dnat"
                },
                "ruleCondition": {
                  "name": "DNATRule",
                  "ipProtocols": [
                    "TCP"
                  ],
                  "destinationPorts": [
                    "9081"
                  ],
                  "sourceAddresses": [
                    "*"
                  ],
                  "destinationAddresses": [
                    "[reference(resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName1'))).IpAddress]"
                  ],
                  "ruleConditionType": "NetworkRuleCondition"
                },
                "translatedAddress": "[variables('AppGateway_IPAddress')]",
                "translatedPort": "9082"
              },


              {
                  "name": "Kali-SSH",
                  "priority": 102,
                  "ruleType": "FirewallPolicyNatRule",
                  "action": {
                    "type": "Dnat"
                  },
                  "ruleCondition": {
                    "name": "SSH-DNATRule",
                    "ipProtocols": [
                      "TCP"
                    ],
                    "destinationPorts": [
                      "33822"
                    ],
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "[reference(resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName1'))).IpAddress]"
                    ],
                    "ruleConditionType": "NetworkRuleCondition"
                  },
                  "translatedAddress": "[variables('NIC-Name2Ipaddress')]",
                  "translatedPort": "22"
              },
                
              {
                  "name": "Kali-RDP",
                  "priority": 103, 
                  "ruleType": "FirewallPolicyNatRule",
                  "action": {
                    "type": "Dnat"
                  },
                  "ruleCondition": {
                    "name": "DNATRule",
                    "ipProtocols": [
                      "TCP"
                    ],
                    "destinationPorts": [
                      "33892"
                    ],
                    "sourceAddresses": [
                      "*"
                    ],
                    "destinationAddresses": [
                      "[reference(resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName1'))).IpAddress]"
                    ],
                    "ruleConditionType": "NetworkRuleCondition"
                  },
                  "translatedAddress": "[variables('NIC-Name2Ipaddress')]",
                  "translatedPort": "3389"
                    
              },


              {
                "name": "[variables('VM-Name3')]",
                "priority": 104,
                "ruleType": "FirewallPolicyNatRule",
                "action": {
                  "type": "Dnat"
                },
                "ruleCondition": {
                  "name": "DNATRule",
                  "ipProtocols": [
                    "TCP"
                  ],
                  "destinationPorts": [
                    "33890"
                  ],
                  "sourceAddresses": [
                    "*"
                  ],
                  "destinationAddresses": [
                    "[reference(resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName1'))).IpAddress]"
                  ],
                  "ruleConditionType": "NetworkRuleCondition"
                },
                "translatedAddress": "[variables('NIC-Name3Ipaddress')]",
                "translatedPort": "3389"
              }
            ]
          }
        },
        {
          "type": "ruleGroups",
          "apiVersion": "2019-06-01",
          "name": "DefaultNetworkRuleCollectionGroup",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[concat('Microsoft.Network/firewallPolicies/', variables('firewallPolicyName'), '/ruleGroups/', 'DefaultDnatRuleCollectionGroup')]",
            "[resourceId('Microsoft.Network/firewallPolicies',variables('firewallPolicyName'))]"
          ],
          "properties": {
            "priority": 200,
            "rules": [
              {
                "name": "IntraVNETandHTTPOutAccess",
                "priority": 100,
                "ruleType": "FirewallPolicyFilterRule",
                "action": {
                  "type": "Allow"
                },
                "ruleConditions": [
                  {
                    "name": "SMB",
                    "ipProtocols": [
                      "TCP"
                    ],
                    "destinationPorts": [
                      "445"
                    ],
                    "sourceAddresses": [
                      "[variables('NIC-Name2Ipaddress')]",
                      "[variables('NIC-Name3Ipaddress')]"
                    ],
                    "destinationAddresses": [
                      "[variables('NIC-Name2Ipaddress')]",
                      "[variables('NIC-Name3Ipaddress')]"
                    ],
                    "ruleConditionType": "NetworkRuleCondition"
                  },
                  {
                    "name": "RDP",
                    "ipProtocols": [
                      "TCP"
                    ],
                    "destinationPorts": [
                      "3389"
                    ],
                    "sourceAddresses": [
                      "[variables('NIC-Name2Ipaddress')]",
                      "[variables('NIC-Name3Ipaddress')]"
                    ],
                    "destinationAddresses": [
                      "[variables('NIC-Name2Ipaddress')]",
                      "[variables('NIC-Name3Ipaddress')]"
                    ],
                    "ruleConditionType": "NetworkRuleCondition"
                  },
                  {
                    "name": "Kali-HTTP",
                    "ipProtocols": [
                      "TCP"
                    ],
                    "destinationPorts": [
                      "80"
                    ],
                    "sourceAddresses": [
                      "[variables('NIC-Name2Ipaddress')]"
                    ],
                    "destinationAddresses": [
                      "*"
                    ],
                    "ruleConditionType": "NetworkRuleCondition"
                  }
                ]
              }
            ]
          }
        },
        {
          "type": "ruleGroups",
          "apiVersion": "2019-06-01",
          "name": "DefaultApplicationRuleCollectionGroup",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[concat('Microsoft.Network/firewallPolicies/', variables('firewallPolicyName'), '/ruleGroups/', 'DefaultNetworkRuleCollectionGroup')]",
            "[resourceId('Microsoft.Network/firewallPolicies',variables('firewallPolicyName'))]"
          ],
          "properties": {
            "priority": 300,
            "rules": [
              {
                "name": "Internet-Access",
                "priority": 100,
                "ruleType": "FirewallPolicyFilterRule",
                "action": {
                  "type": "Allow"
                },
                "ruleConditions": [
                  {
                    "name": "SearchEngineAccess",
                    "protocols": [
                      {
                        "protocolType": "Http",
                        "port": 80
                      },
                      {
                        "protocolType": "Https",
                        "port": 443
                      }
                    ],
                    "sourceAddresses": [
                      "*"
                    ],
                    "targetFqdns": [
                      "*"
                    ],
                    "fqdnTags": [],
                    "ruleConditionType": "ApplicationRuleCondition"
                  },
                  {
                    "name": "Kali-InternetAccess",
                    "protocols": [
                      {
                        "protocolType": "Http",
                        "port": 80
                      },
                      {
                        "protocolType": "Https",
                        "port": 443
                      }
                    ],
                    "sourceAddresses": [
                      "[variables('NIC-Name2Ipaddress')]"
                    ],
                    "targetFqdns": [
                      "*"
                    ],
                    "fqdnTags": [],
                    "ruleConditionType": "ApplicationRuleCondition"
                  }
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "type": "Microsoft.Network/applicationGateways",
      "apiVersion": "2020-04-01",
      "name": "[variables('AG-Name')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIpAddresses', variables('publicIpAddressName1'))]",
        "[resourceId('Microsoft.Network/applicationGatewayWebApplicationFirewallPolicies', variables('AppGatewayPolicyName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VN-Name1'), variables('VN-Name1Subnet1Name'))]"
      ],
      "tags": {},
      "properties": {
        "sku": {
          "name": "WAF_v2",
          "tier": "WAF_v2",
          "capacity": 2
        },
        "gatewayIPConfigurations": [
          {
            "name": "appGatewayIpConfig",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VN-Name1'), variables('VN-Name1Subnet1Name'))]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "appGwPublicFrontendIp",
            "properties": {
              "PublicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIpAddresses', variables('publicIpAddressName2'))]"
              }
            }
          },
          {
            "name": "appGwPrivateFrontendIp",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('VN-Name1'), variables('VN-Name1Subnet1Name'))]"
              },
              "privateIPAddress": "[variables('AppGateway_IPAddress')]",
              "privateIPAllocationMethod": "Static"
            }
          }
        ],
        "frontendPorts": [
          {
            "name": "port_80",
            "properties": {
              "port": 80
            }
          },
         {
            "name": "port_9082",
            "properties": {
              "port": 9082
            }
          },
          {
            "name": "port_8080",
            "properties": {
              "port": 8080
            }
          },
          {
            "name": "port_443",
            "properties": {
              "port": 443
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "PAAS-APP",
            "properties": {
              "backendAddresses": [
                {
                  "fqdn": "[concat(variables('Site-Name1'),'.azurewebsites.net')]"
                }
              ]
            }
          }
        ],
        "backendHttpSettingsCollection": [
          {
            "name": "Default",
            "properties": {
              "port": 443,
              "protocol": "Https",
              "cookieBasedAffinity": "Disabled",
              "hostName": "[concat(variables('Site-Name1'),'.azurewebsites.net')]",
              "pickHostNameFromBackendAddress": false,
              "affinityCookieName": "ApplicationGatewayAffinity",
              "requestTimeout": 20
            }
          }
        ],
        "httpListeners": [
          {
            "name": "Public-HTTP",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('applicationGatewayId'), '/frontendIPConfigurations/appGwPublicFrontendIp')]"
              },
              "frontendPort": {
                "id": "[concat(variables('applicationGatewayId'), '/frontendPorts/port_9082')]"
              },
              "protocol": "Http"
            }
          }
        ],
        "requestRoutingRules": [
          {
            "Name": "PublicIPRule",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('applicationGatewayId'), '/httpListeners/Public-HTTP')]"
              },
              "backendAddressPool": {
                "id": "[concat(variables('applicationGatewayId'), '/backendAddressPools/PAAS-APP')]"
              },
              "backendHttpSettings": {
                "id": "[concat(variables('applicationGatewayId'), '/backendHttpSettingsCollection/Default')]"
              }
            }
          }
        ],
        "enableHttp2": false,
        "firewallPolicy": {
          "id": "[resourceId('Microsoft.Network/applicationGatewayWebApplicationFirewallPolicies', variables('AppGatewayPolicyName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/applicationGateways/providers/diagnosticSettings",
      "name": "[concat(variables('AG-Name'),'/microsoft.insights/', 'AppGatewayDiagnostics')]",
      "apiVersion": "2017-05-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Network/applicationGateways', variables('AG-Name'))]"
      ],
      "properties": {
        "name": "DiagService",
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]",
        "logs": [
          {
            "category": "ApplicationGatewayAccessLog",
            "enabled": true
          },
          {
            "category": "ApplicationGatewayPerformanceLog",
            "enabled": true
          },
          {
            "category": "ApplicationGatewayFirewallLog",
            "enabled": true
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/applicationGatewayWebApplicationFirewallPolicies",
      "apiVersion": "2019-09-01",
      "name": "[variables('AppGatewayPolicyName')]",
      "dependsOn": [],
      "location": "[resourceGroup().location]",
      "tags": {},
      "properties": {
        "customRules": [
          {
            "name": "SentinelBlockIP",
            "priority": 10,
            "ruleType": "MatchRule",
            "action": "Block",
            "matchConditions": [
              {
                "matchVariables": [
                  {
                    "variableName": "RemoteAddr"
                  }
                ],
                "operator": "IPMatch",
                "negationConditon": false,
                "matchValues": [
                  "104.210.223.108"
                ],
                "transforms": []
              }
            ]
          },
          {
            "name": "BlockGeoLocationChina",
            "priority": 20,
            "ruleType": "MatchRule",
            "action": "Block",
            "matchConditions": [
              {
                "matchVariables": [
                  {
                    "variableName": "RemoteAddr"
                  }
                ],
                "operator": "GeoMatch",
                "negationConditon": false,
                "matchValues": [
                  "CN"
                ],
                "transforms": []
              }
            ]
          },
          {
            "name": "BlockInternetExplorer11",
            "priority": 30,
            "ruleType": "MatchRule",
            "action": "Block",
            "matchConditions": [
              {
                "matchVariables": [
                  {
                    "variableName": "RequestHeaders",
                    "selector": "User-Agent"
                  }
                ],
                "operator": "Contains",
                "negationConditon": false,
                "matchValues": [
                  "rv:11.0"
                ],
                "transforms": []
              }
            ]
          }
        ],
        "policySettings": {
          "fileUploadLimitInMb": 100,
          "maxRequestBodySizeInKb": 128,
          "mode": "Prevention",
          "requestBodyCheck": true,
          "state": "Enabled"
        },
        "managedRules": {
          "exclusions": [],
          "managedRuleSets": [
            {
              "ruleSetType": "Microsoft_DefaultRuleSet",
              "ruleSetVersion": "2.1",
              "ruleGroupOverrides": [
                {
                  "ruleGroupName": "PROTOCOL-ENFORCEMENT",
                  "rules": [
                    {
                      "ruleId": "920350",
                      "state": "Disabled",
                      "action": "AnomalyScoring"
                    },
                    {
                      "ruleId": "920320",
                      "state": "Disabled",
                      "action": "AnomalyScoring"
                    }
                  ]
                }
              ]
            },
            {
              "ruleSetType": "Microsoft_BotManagerRuleSet",
              "ruleSetVersion": "1.0",
              "ruleGroupOverrides": []
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Network/routeTables",
      "apiVersion": "2019-02-01",
      "name": "[variables('RT-Name1')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [],
      "properties": {
        "disableBgpRoutePropagation": false,
        "routes": [
          {
            "name": "DefaultRoute",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "10.0.25.4"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-04-01",
      "name": "[variables('NSG-Name1')]",
      "location": "[resourceGroup().location]",
      "tags": {},
      "properties": {
        "securityRules": [
          {
            "name": "Allow-Spoke2-VNET",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "[variables('VN-Name3Prefix')]",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "Allow-Spoke2-VNET-outbound",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "[variables('VN-Name3Prefix')]",
              "access": "Allow",
              "priority": 100,
              "direction": "Outbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups/providers/diagnosticSettings",
      "name": "[concat(variables('NSG-Name1'),'/microsoft.insights/', 'NSG1Diagnostics')]",
      "apiVersion": "2017-05-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('NSG-Name1'))]"
      ],
      "properties": {
        "name": "DiagService",
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]",
        "logs": [
          {
            "category": "NetworkSecurityGroupEvent",
            "enabled": true
          },
          {
            "category": "NetworkSecurityGroupRuleCounter",
            "enabled": true
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-04-01",
      "name": "[variables('NSG-Name2')]",
      "location": "[resourceGroup().location]",
      "tags": {},
      "properties": {
        "securityRules": [
          {
            "name": "Allow-Spoke1-VNET-Inbound",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "[variables('VN-Name2Prefix')]",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "Allow-Spoke1-VNET-Outbound",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "[variables('VN-Name2Prefix')]",
              "access": "Allow",
              "priority": 100,
              "direction": "Outbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups/providers/diagnosticSettings",
      "name": "[concat(variables('NSG-Name2'),'/microsoft.insights/', 'NSG2Diagnostics')]",
      "apiVersion": "2017-05-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('NSG-Name2'))]"
      ],
      "properties": {
        "name": "DiagService",
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]",
        "logs": [
          {
            "category": "NetworkSecurityGroupEvent",
            "enabled": true
          },
          {
            "category": "NetworkSecurityGroupRuleCounter",
            "enabled": true
          }
        ]
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[variables('Site-Name1')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Web/serverfarms/', variables('Site-HPN'))]"
      ],
      "tags": {},
      "properties": {
        "name": "[variables('Site-Name1')]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "DOCKER_REGISTRY_SERVER_URL",
              "value": "https://index.docker.io"
            },
            {
              "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
              "value": "false"
            }
          ],
          "linuxFxVersion": "DOCKER|mohitkusecurity/juice-shop-updated",
          "alwaysOn": true
        },
        "serverFarmId": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('Site-HPN'))]",
        "clientAffinityEnabled": false
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "name": "[variables('Site-HPN')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "Tier": "PremiumV2",
        "Name": "P1v2"
      },
      "kind": "linux",
      "properties": {
        "name": "[variables('Site-HPN')]",
        "workerSize": 3,
        "workerSizeId": 3,
        "numberOfWorkers": 1,
        "reserved": true
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2019-07-01",
      "dependsOn": [ "[resourceId('Microsoft.Network/virtualNetworks', variables('VN-Name2'))]" ],
      "name": "[variables('NIC-Name2')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('NIC-Name2Ipaddress')]",
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('VN-Name2')), '/subnets/',variables('VN-Name2Subnet2Name'))]"
              },
              "privateIPAllocationMethod": "Static"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2019-07-01",
      "dependsOn": [ "[resourceId('Microsoft.Network/virtualNetworks', variables('VN-Name3'))]" ],
      "name": "[variables('NIC-Name3')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('NIC-Name3Ipaddress')]",
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('VN-Name3')), '/subnets/',variables('VN-Name3Subnet1Name'))]"
              },
              "privateIPAllocationMethod": "Static"
            }
          }
        ]
      }
    },


    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2019-07-01",
      "name": "[variables('VM-Name2')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('NIC-Name2'))]"
      ],
      "plan": {
        "name": "kali-2023-3",
        "publisher": "kali-linux",
        "product": "kali" 
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_D2s_v3"
        },
        "storageProfile": {
          "osDisk": {
            "name": "[concat(variables('VM-Name2'),'-datadisk1')]",
            "createOption": "fromImage",
            "managedDisk": {
              "storageAccountType": "Standard_LRS"
            }
          },
          "imageReference": {
            "publisher": "kali-linux",
            "offer": "kali",
            "sku": "kali-2023-3",
            "version": "2023.3.0"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('NIC-Name2'))]"
            }
          ]
        },
        "osProfile": {
          "computerName": "[variables('VM-Name2')]",
          "adminUsername": "[parameters('DefaultUserName')]",
          "adminPassword": "[parameters('DefaultPassword')]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2019-07-01",
      "name": "[variables('VM-Name3')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('NIC-Name3'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_D2s_v3"
        },
        "storageProfile": {
          "osDisk": {
            "name": "[concat(variables('VM-Name3'),'-datadisk1')]",
            "createOption": "fromImage",
            "managedDisk": {
              "storageAccountType": "Standard_LRS"
            }
          },
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2019-Datacenter",
            "version": "latest"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('NIC-Name3'))]"
            }
          ]
        },
        "osProfile": {
          "computerName": "[variables('VM-Name3')]",
          "adminUsername": "[parameters('DefaultUserName')]",
          "adminPassword": "[parameters('DefaultPassword')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": true,
            "provisionVmAgent": true
          }
        },
        "licenseType": "Windows_Server"
      }
    },
    {
      "name": "[parameters('workbookId')]",
      "type": "microsoft.insights/workbooks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-06-17-preview",
      "dependsOn": [],
      "kind": "shared",
      "properties": {
        "displayName": "[variables('workbookDisplayName')]",
        "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## Azure WAF Events\"},\"name\":\"text - 10\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"49e2f511-592f-4d7f-8fda-d686803f3dbf\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"label\":\"Time Range\",\"type\":4,\"isRequired\":true,\"value\":{\"durationMs\":1209600000},\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000}],\"allowCustom\":true},\"resourceType\":\"microsoft.insights/components\"},{\"id\":\"6b801693-49d1-41de-a79d-67b78b05e0a5\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"WAFType\",\"label\":\"WAF Type\",\"type\":7,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"let FakeData = (datatable (Message:string, ruleName_s:string, clientIp_s:string, clientIP_s:string, action_s:string, transactionId_s:string,trackingReference_s:string) [ \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ]);\\r\\nFakeData | union AzureDiagnostics\\r\\n| where ResourceType == \\\"APPLICATIONGATEWAYS\\\" or ResourceType == \\\"FRONTDOORS\\\" or ResourceType == \\\"PROFILES\\\" or ResourceType == \\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\"\\r\\n| summarize Count=count() by ResourceType\\r\\n| extend ResourceTypeImproved = iif(ResourceType == \\\"APPLICATIONGATEWAYS\\\", \\\"Application Gateway\\\", ResourceType)\\r\\n| extend ResourceTypeImproved = iif(ResourceTypeImproved == \\\"FRONTDOORS\\\", \\\"Azure Front Door\\\", ResourceTypeImproved)\\r\\n| extend ResourceTypeImproved = iif(ResourceTypeImproved == \\\"PROFILES\\\", \\\"Azure Front Door Premium\\\", ResourceTypeImproved)\\r\\n| extend ResourceTypeImproved = iif(ResourceTypeImproved == \\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\", \\\"Azure CDN\\\", ResourceTypeImproved)\\r\\n| order by Count desc, ResourceTypeImproved asc\\r\\n| project ResourceTypeImproved\",\"value\":[\"Application Gateway\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"All\"},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"d54c1639-d46c-4655-9d76-d5416926a453\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"WAF\",\"label\":\"WAF Items\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"let FakeData = (datatable (Message:string, ruleName_s:string, clientIp_s:string, clientIP_s:string, action_s:string, transactionId_s:string,trackingReference_s:string) [ \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ]);\\r\\nFakeData | union AzureDiagnostics\\r\\n| where (ResourceType == \\\"APPLICATIONGATEWAYS\\\" or ResourceType == \\\"FRONTDOORS\\\" or ResourceType == \\\"PROFILES\\\" or ResourceType == \\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\") and (\\\"{WAFType:label}\\\" == \\\"All\\\" or (ResourceType == \\\"APPLICATIONGATEWAYS\\\" and \\\"{WAFType:label}\\\" contains \\\"application gateway\\\") or (ResourceType == \\\"FRONTDOORS\\\" and  \\\"{WAFType:label}\\\" contains \\\"azure front door\\\") or (ResourceType == \\\"PROFILES\\\" and \\\"{WAFType:label}\\\" contains \\\"azure front door premium\\\") or (ResourceType==\\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\" and \\\"{WAFType:label}\\\" contains \\\"cdn\\\"))\\r\\n| summarize Count=count() by Resource\\r\\n| order by Count desc, Resource asc\\r\\n| project Value = Resource, Label = strcat(Resource, \\\" - \\\", Count)\",\"value\":[\"value::all\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"All\"},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let FakeData = (datatable (Message:string, ruleName_s:string, clientIp_s:string, clientIP_s:string, action_s:string, transactionId_s:string,trackingReference_s:string) [ \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ]);\\r\\nFakeData | union AzureDiagnostics\\r\\n| where (ResourceType == \\\"APPLICATIONGATEWAYS\\\" or ResourceType == \\\"FRONTDOORS\\\" or ResourceType == \\\"PROFILES\\\" or ResourceType == \\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\") and (\\\"{WAFType:label}\\\" == \\\"All\\\" or (ResourceType == \\\"APPLICATIONGATEWAYS\\\" and \\\"{WAFType:label}\\\" contains \\\"application gateway\\\") or (ResourceType == \\\"FRONTDOORS\\\" and  \\\"{WAFType:label}\\\" contains \\\"azure front door\\\") or (ResourceType == \\\"PROFILES\\\" and  \\\"{WAFType:label}\\\" contains \\\"azure front door premium\\\") or (ResourceType==\\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\" and \\\"{WAFType:label}\\\" contains \\\"cdn\\\")) and (\\\"{WAF:label}\\\" == \\\"All\\\" or Resource in ({WAF}))\\r\\n| where Category == \\\"FrontdoorWebApplicationFirewallLog\\\" or Category == \\\"FrontDoorWebApplicationFirewallLog\\\" or OperationName == \\\"ApplicationGatewayFirewall\\\" or Category == \\\"WebApplicationFirewallLogs\\\"\\r\\n| extend Rule = strcat(ruleName_s, Message), ClientIP = strcat(clientIp_s, clientIP_s)\\r\\n// Application Gateway has Matched, Blocked, Detected : translates to Matched, Block, Log\\r\\n// Azure Front Door has Matched, Block, Log : translates to Matched, Block, Log\\r\\n| extend Action = iif(action_s == \\\"Blocked\\\", Action = \\\"Block\\\", action_s)\\r\\n| extend Action = iif(Action == \\\"Detected\\\", Action = \\\"Log\\\", Action)\\r\\n| summarize number = count() by Action\",\"size\":3,\"showAnalytics\":true,\"title\":\"WAF actions filter\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"exportFieldName\":\"series\",\"exportParameterName\":\"SelectedAction\",\"exportDefaultValue\":\"*\",\"showExportToExcel\":true,\"exportToExcelOptions\":\"all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\"},\"customWidth\":\"27\",\"name\":\"query - 11\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let FakeData = (datatable (Message:string, ruleName_s:string, clientIp_s:string, clientIP_s:string, action_s:string, transactionId_s:string,trackingReference_s:string) [ \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ]);\\r\\nFakeData | union AzureDiagnostics\\r\\n| where (ResourceType == \\\"APPLICATIONGATEWAYS\\\" or ResourceType == \\\"FRONTDOORS\\\" or ResourceType == \\\"PROFILES\\\" or ResourceType == \\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\") and (\\\"{WAFType:label}\\\" == \\\"All\\\" or (ResourceType == \\\"APPLICATIONGATEWAYS\\\" and \\\"{WAFType:label}\\\" contains \\\"application gateway\\\") or (ResourceType == \\\"FRONTDOORS\\\" and  \\\"{WAFType:label}\\\" contains \\\"azure front door\\\") or (ResourceType == \\\"PROFILES\\\" and  \\\"{WAFType:label}\\\" contains \\\"azure front door premium\\\") or (ResourceType==\\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\" and \\\"{WAFType:label}\\\" contains \\\"cdn\\\")) and (\\\"{WAF:label}\\\" == \\\"All\\\" or Resource in ({WAF}))\\r\\n| where Category == \\\"FrontdoorWebApplicationFirewallLog\\\" or Category == \\\"FrontDoorWebApplicationFirewallLog\\\" or OperationName == \\\"ApplicationGatewayFirewall\\\" or Category == \\\"WebApplicationFirewallLogs\\\"\\r\\n| extend Rule = strcat(ruleName_s, Message), ClientIP = strcat(clientIp_s, clientIP_s)\\r\\n| extend Action = iif(action_s == \\\"Blocked\\\", Action = \\\"Block\\\", action_s)\\r\\n| extend Action = iif(Action == \\\"Detected\\\", Action = \\\"Log\\\", Action)\\r\\n| where Action == \\\"Block\\\"\\r\\n| where requestUri_s <> \\\"/\\\"\\r\\n| summarize count() by requestUri_s \\r\\n| top 40 by count_ desc \",\"size\":3,\"showAnalytics\":true,\"title\":\"Top 40 Blocked Request URI addresses, filter to single URI address\",\"noDataMessage\":\"The current data has no \\\"Blocked\\\" results\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"exportFieldName\":\"requestUri_s\",\"exportParameterName\":\"RequestURI\",\"exportDefaultValue\":\"*\",\"showExportToExcel\":true,\"exportToExcelOptions\":\"all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"requestUri_s\",\"formatter\":1,\"formatOptions\":{\"showIcon\":true}},\"leftContent\":{\"columnMatch\":\"count_\",\"formatter\":8,\"formatOptions\":{\"palette\":\"auto\",\"showIcon\":true},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":2,\"maximumSignificantDigits\":5}}},\"showBorder\":false},\"graphSettings\":{\"type\":0,\"topContent\":{\"columnMatch\":\"requestUri_s\",\"formatter\":1},\"centerContent\":{\"columnMatch\":\"count_\",\"formatter\":1,\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"mapSettings\":{\"locInfo\":\"LatLong\",\"sizeSettings\":\"count_\",\"sizeAggregation\":\"Sum\",\"legendMetric\":\"count_\",\"legendAggregation\":\"Sum\",\"itemColorSettings\":{\"type\":\"heatmap\",\"colorAggregation\":\"Sum\",\"nodeColorField\":\"count_\",\"heatmapPalette\":\"greenRed\"}}},\"customWidth\":\"63\",\"name\":\"query - 9\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let FakeData = (datatable (Message:string, ruleName_s:string, clientIp_s:string, clientIP_s:string, action_s:string, transactionId_s:string,trackingReference_s:string) [ \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ]);\\r\\nFakeData | union AzureDiagnostics\\r\\n| where (ResourceType == \\\"APPLICATIONGATEWAYS\\\" or ResourceType == \\\"FRONTDOORS\\\" or ResourceType == \\\"PROFILES\\\" or ResourceType == \\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\") and (\\\"{WAFType:label}\\\" == \\\"All\\\" or (ResourceType == \\\"APPLICATIONGATEWAYS\\\" and \\\"{WAFType:label}\\\" contains \\\"application gateway\\\") or (ResourceType == \\\"FRONTDOORS\\\" and  \\\"{WAFType:label}\\\" contains \\\"azure front door\\\") or (ResourceType == \\\"PROFILES\\\" and  \\\"{WAFType:label}\\\" contains \\\"azure front door premium\\\") or (ResourceType==\\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\" and \\\"{WAFType:label}\\\" contains \\\"cdn\\\")) and (\\\"{WAF:label}\\\" == \\\"All\\\" or Resource in ({WAF}))\\r\\n| where Category == \\\"FrontdoorWebApplicationFirewallLog\\\" or Category == \\\"FrontDoorWebApplicationFirewallLog\\\" or OperationName == \\\"ApplicationGatewayFirewall\\\" or Category == \\\"WebApplicationFirewallLogs\\\"\\r\\n| extend Action = iif(action_s == \\\"Blocked\\\", Action = \\\"Block\\\", action_s)\\r\\n| extend Action = iif(Action == \\\"Detected\\\", Action = \\\"Log\\\", Action)\\r\\n| where '{SelectedAction}' == Action or '{SelectedAction}' == \\\"*\\\" \\r\\n| where '{RequestURI}' == requestUri_s or '{RequestURI}' == \\\"*\\\"\\r\\n| extend Rule = strcat(ruleName_s, Message), ClientIP = strcat(clientIp_s, clientIP_s)\\r\\n| extend Rule= iif(Rule contains \\\"Mandatory rule. Cannot be disabled.\\\", strcat_array(split(Rule, \\\"Mandatory rule. Cannot be disabled. Inbound \\\",1),\\\"\\\"), Rule) // Removes initial component for mandatory rule \\r\\n| extend Rule = iif(Rule contains \\\"Total Inbound Score\\\", strcat_array(array_concat(split(Rule, \\\" - SQLI=\\\", 0), parse_json('[\\\") -\\\"]'), split(Rule,\\\"):\\\",1)),\\\"\\\"),Rule) // Removes smaller information if more info is available for anomaly score\\r\\n| summarize count() by Rule\\r\\n| top 50 by count_ desc\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Top 50 event trigger, filter by rule name\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"exportFieldName\":\"Rule\",\"exportParameterName\":\"Selected\",\"exportDefaultValue\":\"*\",\"showExportToExcel\":true,\"exportToExcelOptions\":\"all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"count_\",\"formatter\":3,\"formatOptions\":{\"palette\":\"blue\",\"showIcon\":true}}],\"sortBy\":[{\"itemKey\":\"$gen_bar_count__1\",\"sortOrder\":2}],\"labelSettings\":[{\"columnId\":\"count_\",\"label\":\"\"}]},\"sortBy\":[{\"itemKey\":\"$gen_bar_count__1\",\"sortOrder\":2}]},\"customWidth\":\"30\",\"name\":\"query - 12\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let FakeData = (datatable (Message:string, ruleName_s:string, clientIp_s:string, clientIP_s:string, action_s:string, transactionId_s:string,trackingReference_s:string) [ \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ]);\\r\\nFakeData | union AzureDiagnostics\\r\\n| where (ResourceType == \\\"APPLICATIONGATEWAYS\\\" or ResourceType == \\\"FRONTDOORS\\\" or ResourceType == \\\"PROFILES\\\" or ResourceType == \\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\") and (\\\"{WAFType:label}\\\" == \\\"All\\\" or (ResourceType == \\\"APPLICATIONGATEWAYS\\\" and \\\"{WAFType:label}\\\" contains \\\"application gateway\\\") or (ResourceType == \\\"FRONTDOORS\\\" and  \\\"{WAFType:label}\\\" contains \\\"azure front door\\\") or (ResourceType == \\\"PROFILES\\\" and  \\\"{WAFType:label}\\\" contains \\\"azure front door premium\\\") or (ResourceType==\\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\" and \\\"{WAFType:label}\\\" contains \\\"cdn\\\")) and (\\\"{WAF:label}\\\" == \\\"All\\\" or Resource in ({WAF}))\\r\\n| where Category == \\\"FrontdoorWebApplicationFirewallLog\\\" or Category == \\\"FrontDoorWebApplicationFirewallLog\\\" or OperationName == \\\"ApplicationGatewayFirewall\\\" or Category == \\\"WebApplicationFirewallLogs\\\"\\r\\n| extend Action = iif(action_s == \\\"Blocked\\\", Action = \\\"Block\\\", action_s)\\r\\n| extend Action = iif(Action == \\\"Detected\\\", Action = \\\"Log\\\", Action)\\r\\n| where '{SelectedAction}' == Action or '{SelectedAction}' == \\\"*\\\" \\r\\n| where '{RequestURI}' == requestUri_s or '{RequestURI}' == \\\"*\\\"\\r\\n| extend Rule = strcat(ruleName_s, Message), ClientIP = strcat(clientIp_s, clientIP_s)\\r\\n| where '{Selected}' == Rule or '{Selected}' == \\\"*\\\"\\r\\n| summarize count() by Rule, bin(TimeGenerated, 1h)\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Messages, by time\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"exportToExcelOptions\":\"all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"barchart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Message\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"count_\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}}},\"customWidth\":\"70\",\"name\":\"query - 13\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let FakeData = (datatable (Message:string,ruleName_s:string,clientIp_s:string,clientIP_s:string,action_s:string,transactionId_s:string,site_s:string,details_message_sRole:string,details_file_sRole:string,hostname_sRole:string,Role:string,trackingReference_s:string,requestUri_s:string,ruleSetType_s:string,details_message_s:string,details_data_s:string,details_file_s:string,hostname_s:string,instanceId_s:string) [ \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\",\\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\",\\\"\\\",\\\"\\\",\\\"\\\",\\\"\\\",\\\"\\\",\\\"\\\",\\\"\\\" ]);\\r\\nFakeData | union AzureDiagnostics\\r\\n| where (ResourceType == \\\"APPLICATIONGATEWAYS\\\" or ResourceType == \\\"FRONTDOORS\\\" or ResourceType == \\\"PROFILES\\\" or ResourceType == \\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\") and (\\\"{WAFType:label}\\\" == \\\"All\\\" or (ResourceType == \\\"APPLICATIONGATEWAYS\\\" and \\\"{WAFType:label}\\\" contains \\\"application gateway\\\") or (ResourceType == \\\"FRONTDOORS\\\" and  \\\"{WAFType:label}\\\" contains \\\"azure front door\\\") or (ResourceType == \\\"PROFILES\\\" and  \\\"{WAFType:label}\\\" contains \\\"azure front door premium\\\") or (ResourceType==\\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\" and \\\"{WAFType:label}\\\" contains \\\"cdn\\\")) and (\\\"{WAF:label}\\\" == \\\"All\\\" or Resource in ({WAF}))\\r\\n| where Category == \\\"FrontdoorWebApplicationFirewallLog\\\" or Category == \\\"FrontDoorWebApplicationFirewallLog\\\" or OperationName == \\\"ApplicationGatewayFirewall\\\" or Category == \\\"WebApplicationFirewallLogs\\\"\\r\\n| extend Rule = strcat(ruleName_s, Message), ClientIP = strcat(clientIp_s, clientIP_s)\\r\\n| extend Action = iif(action_s == \\\"Blocked\\\", Action = \\\"Block\\\", action_s)\\r\\n| extend Action = iif(Action == \\\"Detected\\\", Action = \\\"Log\\\", Action)\\r\\n| where '{SelectedAction}' == Action or '{SelectedAction}' == \\\"*\\\" \\r\\n| where '{RequestURI}' == requestUri_s or '{RequestURI}' == \\\"*\\\"\\r\\n| where '{Selected}' == Rule or '{Selected}' == \\\"*\\\" \\r\\n| extend Role =  extract(\\\"ApplicationGateway([a-zA-Z_a-zA-Z_0-9]*)\\\",1,instanceId_s) \\r\\n| extend RequestUri = requestUri_s, RuleSetType = ruleSetType_s, Message_Details = details_message_s, Data_Details = details_data_s, File_Details = details_file_s, Hostname = hostname_s, Site = site_s\\r\\n| project Rule, TimeGenerated, SourceSystem, Hostname, ResourceId, ResourceGroup, ResourceProvider, Category, Role, Action, Site, Message_Details, File_Details, ClientIP, RequestUri\\r\\n| sort by TimeGenerated\",\"size\":0,\"showAnalytics\":true,\"title\":\"Message, full details\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"exportToExcelOptions\":\"all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"filter\":true},\"sortBy\":[]},\"name\":\"query - 11\"},{\"type\":1,\"content\":{\"json\":\"---\"},\"name\":\"text - 12\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let FakeData = (datatable (Message:string, ruleName_s:string, clientIp_s:string, clientIP_s:string, action_s:string, transactionId_s:string,trackingReference_s:string) [ \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ]);\\r\\nFakeData | union AzureDiagnostics\\r\\n| where (ResourceType == \\\"APPLICATIONGATEWAYS\\\" or ResourceType == \\\"FRONTDOORS\\\" or ResourceType == \\\"PROFILES\\\" or ResourceType == \\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\") and (\\\"{WAFType:label}\\\" == \\\"All\\\" or (ResourceType == \\\"APPLICATIONGATEWAYS\\\" and \\\"{WAFType:label}\\\" contains \\\"application gateway\\\") or (ResourceType == \\\"FRONTDOORS\\\" and  \\\"{WAFType:label}\\\" contains \\\"azure front door\\\") or (ResourceType == \\\"PROFILES\\\" and  \\\"{WAFType:label}\\\" contains \\\"azure front door premium\\\") or (ResourceType==\\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\" and \\\"{WAFType:label}\\\" contains \\\"cdn\\\")) and (\\\"{WAF:label}\\\" == \\\"All\\\" or Resource in ({WAF}))\\r\\n| where Category == \\\"FrontdoorWebApplicationFirewallLog\\\" or Category == \\\"FrontDoorWebApplicationFirewallLog\\\" or (OperationName == \\\"ApplicationGatewayFirewall\\\" and Message contains \\\"attack\\\") or Category == \\\"WebApplicationFirewallLogs\\\"\\r\\n| where '{RequestURI}' == requestUri_s or '{RequestURI}' == \\\"*\\\"\\r\\n| extend Rule = strcat(ruleName_s, Message), ClientIP = strcat(clientIp_s, clientIP_s)\\r\\n| extend Action = iif(action_s == \\\"Blocked\\\", Action = \\\"Block\\\", action_s)\\r\\n| extend Action = iif(Action == \\\"Detected\\\", Action = \\\"Log\\\", Action)\\r\\n| where '{SelectedAction}' == Action or '{SelectedAction}' == \\\"*\\\" \\r\\n| where '{Selected}' == Rule or '{Selected}' == \\\"*\\\" \\r\\n| summarize Amount = count() by Rule\\r\\n| order by Amount desc\\r\\n\\r\\n\",\"size\":0,\"title\":\"Attacks events, by messages and filterable by rule name\",\"noDataMessage\":\"Filtered messages are not attack events\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"exportFieldName\":\"\",\"exportParameterName\":\"MessageFilter\",\"exportDefaultValue\":\"{\\\"Rule\\\":\\\"*\\\"}\",\"showExportToExcel\":true,\"exportToExcelOptions\":\"all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Amount\",\"formatter\":8,\"formatOptions\":{\"palette\":\"blueDark\",\"showIcon\":true,\"aggregation\":\"Sum\"}}],\"filter\":true},\"sortBy\":[]},\"customWidth\":\"20\",\"name\":\"query - 16\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let SelectedMS = dynamic({MessageFilter}); // reference to the above list of messages (Event trigger)\\r\\nlet Child = SelectedMS.Rule; // Used to choose a group of messages - redirects to the message which was grouped\\r\\nlet FakeData = (datatable (Message:string, ruleName_s:string, clientIp_s:string, clientIP_s:string, action_s:string, transactionId_s:string,trackingReference_s:string) [ \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ]);\\r\\nFakeData | union AzureDiagnostics\\r\\n| where '{RequestURI}' == requestUri_s or '{RequestURI}' == \\\"*\\\"\\r\\n| where (ResourceType == \\\"APPLICATIONGATEWAYS\\\" or ResourceType == \\\"FRONTDOORS\\\" or ResourceType == \\\"PROFILES\\\" or ResourceType == \\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\") and (\\\"{WAFType:label}\\\" == \\\"All\\\" or (ResourceType == \\\"APPLICATIONGATEWAYS\\\" and \\\"{WAFType:label}\\\" contains \\\"application gateway\\\") or (ResourceType == \\\"FRONTDOORS\\\" and  \\\"{WAFType:label}\\\" contains \\\"azure front door\\\") or (ResourceType == \\\"PROFILES\\\" and  \\\"{WAFType:label}\\\" contains \\\"azure front door premium\\\") or (ResourceType==\\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\" and \\\"{WAFType:label}\\\" contains \\\"cdn\\\")) and (\\\"{WAF:label}\\\" == \\\"All\\\" or Resource in ({WAF}))\\r\\n| where Category == \\\"FrontdoorWebApplicationFirewallLog\\\" or Category == \\\"FrontDoorWebApplicationFirewallLog\\\" or (OperationName == \\\"ApplicationGatewayFirewall\\\" and Message contains \\\"attack\\\") or Category == \\\"WebApplicationFirewallLogs\\\" \\r\\n| extend Action = iif(action_s == \\\"Blocked\\\", Action = \\\"Block\\\", action_s)\\r\\n| extend Action = iif(Action == \\\"Detected\\\", Action = \\\"Log\\\", Action)\\r\\n| where '{SelectedAction}' == Action or '{SelectedAction}' == \\\"*\\\" \\r\\n| extend Rule = strcat(ruleName_s, Message), ClientIP = strcat(clientIp_s, clientIP_s)\\r\\n| where Rule == Child or Child == \\\"*\\\"\\r\\n| where '{Selected}' == Rule or '{Selected}' == \\\"*\\\"\\r\\n| summarize Amount = count() by Rule, bin(TimeGenerated, 1h), ResourceId\\r\\n| project Amount, Rule, TimeGenerated, ResourceId\\r\\n| order by Amount desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"Attack events, by time\",\"noDataMessage\":\"Filtered messages are not attack events\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"exportParameterName\":\"Message\",\"exportDefaultValue\":\"{ \\\"Name\\\":\\\"\\\", \\\"Type\\\":\\\"*\\\"}\",\"showExportToExcel\":true,\"exportToExcelOptions\":\"all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"areachart\"},\"customWidth\":\"80\",\"name\":\"query - 14\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let SelectedMS = dynamic({MessageFilter}); // reference to the above list of messages (Event trigger)\\r\\nlet Child = SelectedMS.Rule; // Used to choose a group of messages - redirects to the message which was grouped\\r\\nlet FakeData = (datatable (Message:string, ruleName_s:string, clientIp_s:string, clientIP_s:string, action_s:string, transactionId_s:string,trackingReference_s:string) [ \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ]);\\r\\nFakeData | union AzureDiagnostics\\r\\n| where (ResourceType == \\\"APPLICATIONGATEWAYS\\\" or ResourceType == \\\"FRONTDOORS\\\" or ResourceType == \\\"PROFILES\\\" or ResourceType == \\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\") and (\\\"{WAFType:label}\\\" == \\\"All\\\" or (ResourceType == \\\"APPLICATIONGATEWAYS\\\" and \\\"{WAFType:label}\\\" contains \\\"application gateway\\\") or (ResourceType == \\\"FRONTDOORS\\\" and  \\\"{WAFType:label}\\\" contains \\\"azure front door\\\") or (ResourceType == \\\"PROFILES\\\" and  \\\"{WAFType:label}\\\" contains \\\"azure front door premium\\\") or (ResourceType==\\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\" and \\\"{WAFType:label}\\\" contains \\\"cdn\\\")) and (\\\"{WAF:label}\\\" == \\\"All\\\" or Resource in ({WAF}))\\r\\n| where Category == \\\"FrontdoorWebApplicationFirewallLog\\\" or Category == \\\"FrontDoorWebApplicationFirewallLog\\\" or (OperationName == \\\"ApplicationGatewayFirewall\\\" and Message contains \\\"attack\\\") or Category == \\\"WebApplicationFirewallLogs\\\"\\r\\n| where '{RequestURI}' == requestUri_s or '{RequestURI}' == \\\"*\\\"\\r\\n| extend Rule = strcat(ruleName_s, Message), ClientIP = strcat(clientIp_s, clientIP_s)\\r\\n| extend Action = iif(action_s == \\\"Blocked\\\", Action = \\\"Block\\\", action_s)\\r\\n| extend Action = iif(Action == \\\"Detected\\\", Action = \\\"Log\\\", Action)\\r\\n| extend TrackingID = strcat(transactionId_s, trackingReference_s)\\r\\n| where '{SelectedAction}' == Action or '{SelectedAction}' == \\\"*\\\" \\r\\n| where '{Selected}' == Rule or '{Selected}' == \\\"*\\\"\\r\\n| where Rule == Child or Child == \\\"*\\\" \\r\\n| distinct TrackingID\",\"size\":0,\"showAnalytics\":true,\"title\":\"TrackingID filter\",\"noDataMessage\":\"You've over filtered or you're missing this data.\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"exportFieldName\":\"TrackingID\",\"exportParameterName\":\"SelectedTrackingID\",\"exportDefaultValue\":\"*\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":500,\"filter\":true,\"sortBy\":[{\"itemKey\":\"TrackingID\",\"sortOrder\":2}]},\"sortBy\":[{\"itemKey\":\"TrackingID\",\"sortOrder\":2}]},\"customWidth\":\"20\",\"name\":\"query - 12\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let SelectedMS = dynamic({MessageFilter}); // reference to the above list of messages (Event trigger)\\r\\nlet Child = SelectedMS.Rule; // Used to choose a group of messages - redirects to the message which was grouped\\r\\nlet FakeData = (datatable (Message:string,ruleName_s:string,clientIp_s:string,clientIP_s:string,action_s:string,transactionId_s:string,site_s:string,details_message_sRole:string,details_file_sRole:string,hostname_sRole:string,Role:string,trackingReference_s:string,ruleGroup_s:string,instanceId_s:string,ruleSetType_s:string,details_message_s:string,details_data_s:string,details_file_s:string,hostname_s:string) [ \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\",\\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\",\\\"\\\",\\\"\\\",\\\"\\\",\\\"\\\",\\\"\\\" ]);\\r\\nFakeData | union AzureDiagnostics\\r\\n| where (ResourceType == \\\"APPLICATIONGATEWAYS\\\" or ResourceType == \\\"FRONTDOORS\\\" or ResourceType == \\\"PROFILES\\\" or ResourceType == \\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\") and (\\\"{WAFType:label}\\\" == \\\"All\\\" or (ResourceType == \\\"APPLICATIONGATEWAYS\\\" and \\\"{WAFType:label}\\\" contains \\\"application gateway\\\") or (ResourceType == \\\"FRONTDOORS\\\" and  \\\"{WAFType:label}\\\" contains \\\"azure front door\\\") or (ResourceType == \\\"PROFILES\\\" and  \\\"{WAFType:label}\\\" contains \\\"azure front door premium\\\") or (ResourceType==\\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\" and \\\"{WAFType:label}\\\" contains \\\"cdn\\\")) and (\\\"{WAF:label}\\\" == \\\"All\\\" or Resource in ({WAF}))\\r\\n| where Category == \\\"FrontdoorWebApplicationFirewallLog\\\" or Category == \\\"FrontDoorWebApplicationFirewallLog\\\" or (OperationName == \\\"ApplicationGatewayFirewall\\\" and Message contains \\\"attack\\\") or Category == \\\"WebApplicationFirewallLogs\\\"\\r\\n| where '{RequestURI}' == requestUri_s or '{RequestURI}' == \\\"*\\\"\\r\\n| extend Rule = strcat(ruleName_s, Message), ClientIP = strcat(clientIp_s, clientIP_s)\\r\\n| extend Action = iif(action_s == \\\"Blocked\\\", Action = \\\"Block\\\", action_s)\\r\\n| extend Action = iif(Action == \\\"Detected\\\", Action = \\\"Log\\\", Action)\\r\\n| extend TrackingID = strcat(transactionId_s, trackingReference_s)\\r\\n| where '{SelectedTrackingID}' == TrackingID or '{SelectedTrackingID}' == \\\"*\\\" \\r\\n| where '{SelectedAction}' == Action or '{SelectedAction}' == \\\"*\\\" \\r\\n| where '{Selected}' == Rule or '{Selected}' == \\\"*\\\"\\r\\n| where Rule == Child or Child == \\\"*\\\"\\r\\n| extend RuleGroup = ruleGroup_s, InstandUri = instanceId_s, RequestUri = requestUri_s, RuleSetType = ruleSetType_s, Message_Details = details_message_s, Data_Details = details_data_s, File_Details = details_file_s, Hostname = hostname_s\\r\\n| project TrackingID, TimeGenerated, Rule, ClientIP, RuleGroup, InstandUri, RequestUri, RuleSetType, Action, Message_Details, File_Details, Data_Details, Hostname, Category\",\"size\":0,\"showAnalytics\":true,\"title\":\"TrackingID Messages\",\"noDataMessage\":\"You've over filtered or you're missing this data.\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"rowLimit\":50}},\"customWidth\":\"80\",\"name\":\"query - 13\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let SelectedMS = dynamic({MessageFilter}); // reference to the above list of messages (Event trigger)\\r\\nlet Child = SelectedMS.Rule; // Used to choose a group of messages - redirects to the message which was grouped\\r\\nlet FakeData = (datatable (Message:string, ruleName_s:string, clientIp_s:string, clientIP_s:string, action_s:string, transactionId_s:string,trackingReference_s:string) [ \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\" ]);\\r\\nFakeData | union AzureDiagnostics\\r\\n| where '{RequestURI}' == requestUri_s or '{RequestURI}' == \\\"*\\\"\\r\\n| where (ResourceType == \\\"APPLICATIONGATEWAYS\\\" or ResourceType == \\\"FRONTDOORS\\\" or ResourceType == \\\"PROFILES\\\" or ResourceType == \\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\") and (\\\"{WAFType:label}\\\" == \\\"All\\\" or (ResourceType == \\\"APPLICATIONGATEWAYS\\\" and \\\"{WAFType:label}\\\" contains \\\"application gateway\\\") or (ResourceType == \\\"FRONTDOORS\\\" and  \\\"{WAFType:label}\\\" contains \\\"azure front door\\\") or (ResourceType == \\\"PROFILES\\\" and  \\\"{WAFType:label}\\\" contains \\\"azure front door premium\\\") or (ResourceType==\\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\" and \\\"{WAFType:label}\\\" contains \\\"cdn\\\")) and (\\\"{WAF:label}\\\" == \\\"All\\\" or Resource in ({WAF}))\\r\\n| where Category == \\\"FrontdoorWebApplicationFirewallLog\\\" or Category == \\\"FrontDoorWebApplicationFirewallLog\\\" or (OperationName == \\\"ApplicationGatewayFirewall\\\" and Message contains \\\"attack\\\") or Category == \\\"WebApplicationFirewallLogs\\\"\\r\\n| extend Rule = strcat(ruleName_s, Message), ClientIP = strcat(clientIp_s, clientIP_s)\\r\\n| extend Action = iif(action_s == \\\"Blocked\\\", Action = \\\"Block\\\", action_s)\\r\\n| extend Action = iif(Action == \\\"Detected\\\", Action = \\\"Log\\\", Action)\\r\\n| extend TrackingID = strcat(transactionId_s, trackingReference_s)\\r\\n| where '{SelectedTrackingID}' == TrackingID or '{SelectedTrackingID}' == \\\"*\\\" \\r\\n| where Rule == Child or Child == \\\"*\\\"\\r\\n| where '{SelectedAction}' == Action or '{SelectedAction}' == \\\"*\\\"\\r\\n| where '{Selected}' == Rule or '{Selected}' == \\\"*\\\"\\r\\n| summarize count() by ClientIP\\r\\n| top 10 by count_ desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"Top 10 Attacking IP Addresses, filter to single IP address\",\"noDataMessage\":\"Filtered messages are not attack events\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"exportFieldName\":\"x\",\"exportParameterName\":\"ClientIP\",\"exportDefaultValue\":\"*\",\"showExportToExcel\":true,\"exportToExcelOptions\":\"all\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"barchart\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"ClientIP\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"count_\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"graphSettings\":{\"type\":0,\"topContent\":{\"columnMatch\":\"ClientIP\",\"formatter\":1},\"centerContent\":{\"columnMatch\":\"count_\",\"formatter\":1,\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"showLegend\":true},\"mapSettings\":{\"locInfo\":\"LatLong\",\"sizeSettings\":\"count_\",\"sizeAggregation\":\"Sum\",\"legendMetric\":\"count_\",\"legendAggregation\":\"Sum\",\"itemColorSettings\":{\"type\":\"heatmap\",\"colorAggregation\":\"Sum\",\"nodeColorField\":\"count_\",\"heatmapPalette\":\"greenRed\"}}},\"customWidth\":\"25\",\"name\":\"query - 12\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let SelectedMS = dynamic({MessageFilter}); // reference to the above list of messages (Event trigger)\\r\\nlet Child = SelectedMS.Rule; // Used to choose a group of messages - redirects to the message which was grouped\\r\\nlet FakeData = (datatable (Message:string,ruleName_s:string,clientIp_s:string,clientIP_s:string,action_s:string,transactionId_s:string,site_s:string,details_message_sRole:string,details_file_sRole:string,hostname_sRole:string,Role:string,trackingReference_s:string,ruleGroup_s:string,instanceId_s:string,ruleSetType_s:string,details_message_s:string,details_data_s:string,details_file_s:string,hostname_s:string,requestUri_s:string) [ \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\",\\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\",\\\"\\\",\\\"\\\",\\\"\\\",\\\"\\\",\\\"\\\",\\\"\\\" ]);\\r\\nFakeData | union AzureDiagnostics\\r\\n| where (ResourceType == \\\"APPLICATIONGATEWAYS\\\" or ResourceType == \\\"FRONTDOORS\\\" or ResourceType == \\\"PROFILES\\\" or ResourceType == \\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\") and (\\\"{WAFType:label}\\\" == \\\"All\\\" or (ResourceType == \\\"APPLICATIONGATEWAYS\\\" and \\\"{WAFType:label}\\\" contains \\\"application gateway\\\") or (ResourceType == \\\"FRONTDOORS\\\" and  \\\"{WAFType:label}\\\" contains \\\"azure front door\\\") or (ResourceType == \\\"PROFILES\\\" and  \\\"{WAFType:label}\\\" contains \\\"azure front door premium\\\") or (ResourceType==\\\"CDNWEBAPPLICATIONFIREWALLPOLICIES\\\" and \\\"{WAFType:label}\\\" contains \\\"cdn\\\")) and (\\\"{WAF:label}\\\" == \\\"All\\\" or Resource in ({WAF}))\\r\\n| where Category == \\\"FrontdoorWebApplicationFirewallLog\\\" or Category == \\\"FrontDoorWebApplicationFirewallLog\\\" or (OperationName == \\\"ApplicationGatewayFirewall\\\" and Message contains \\\"attack\\\") or Category == \\\"WebApplicationFirewallLogs\\\"\\r\\n| where '{RequestURI}' == requestUri_s or '{RequestURI}' == \\\"*\\\"\\r\\n| extend Rule = strcat(ruleName_s, Message), ClientIP = strcat(clientIp_s, clientIP_s)\\r\\n| where Rule == Child or Child == \\\"*\\\"\\r\\n| extend Action = iif(action_s == \\\"Blocked\\\", Action = \\\"Block\\\", action_s)\\r\\n| extend Action = iif(Action == \\\"Detected\\\", Action = \\\"Log\\\", Action)\\r\\n| extend TrackingID = strcat(transactionId_s, trackingReference_s)\\r\\n| where '{SelectedTrackingID}' == TrackingID or '{SelectedTrackingID}' == \\\"*\\\" \\r\\n| where '{SelectedAction}' == Action or '{SelectedAction}' == \\\"*\\\" \\r\\n| where '{Selected}' == Rule or '{Selected}' == \\\"*\\\"\\r\\n| where ('{ClientIP}' == ClientIP or '{ClientIP}' == \\\"*\\\")\\r\\n| extend RuleGroup = ruleGroup_s, InstandUri = instanceId_s, RequestUri = requestUri_s, RuleSetType = ruleSetType_s, Message_Details = details_message_s, Data_Details = details_data_s, File_Details = details_file_s, Hostname = hostname_s\\r\\n| project TimeGenerated, Rule, ClientIP, RuleGroup, InstandUri, RequestUri, RuleSetType, Action, Message_Details, File_Details, Data_Details, Hostname, Category\",\"size\":0,\"title\":\"Attack messages of IP address\",\"noDataMessage\":\"Filtered messages are not attack events\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"filter\":true}},\"customWidth\":\"75\",\"showPin\":true,\"name\":\"query - 13\"}],\"isLocked\":false,\"fromTemplateId\":\"sentinel-WebApplicationFirewallFirewallEvents\"}",
        "version": "1.0",
        "sourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]",
        "category": "[variables('workbookType')]"
      }
    }
  ],


    "outputs": {}
  }
